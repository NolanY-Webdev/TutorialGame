package data;

import static helpers.Clock.*;

public class WaveManager {

	
	private float timeSinceLastWave, spawnTime, waveBreakTimer;
	private int waveNumber, enemiesPerWave;
	private Enemy enemyType;
	private Wave currentWave;
	
	public WaveManager(Enemy enemyType, float spawnTime, int enemiesPerWave) {
		this.enemyType = enemyType;
		this.enemiesPerWave = enemiesPerWave;
		this.spawnTime = spawnTime;
		this.timeSinceLastWave = 0;
		this.waveNumber = 0;
		this.waveBreakTimer = 10;

		this.currentWave = null;
		
		newWave();
	}
	
	public void update() {
		if(!currentWave.isCompleted()) {
			currentWave.update();
		} else if (currentWave.isCompleted()) {
			System.out.println("Wave " + waveNumber + " completed. Wave Break:" + timeSinceLastWave);
			if(timeSinceLastWave >= waveBreakTimer) {
				timeSinceLastWave = 0;
				newWave();
			} else if (timeSinceLastWave < waveBreakTimer) {
				timeSinceLastWave += Delta();
			}
		}
	}
	
	public void newWave() {
		currentWave = new Wave(enemyType, spawnTime, enemiesPerWave);
		waveNumber++;
		System.out.println("Current Wave: " + waveNumber);
	}
	
	public Wave getCurrentWave() {
		return currentWave;
	}
}
